#!/usr/bin/env python

import sys
import shpshift
from optparse import OptionParser

def invalid_opts(parser):
    parser.print_help(sys.stderr)
    sys.exit(1)

def print_error(msg):
    sys.stdout.write(msg)
    sys.stdout.write("\n")
    sys.exit(1)

def get_header(parser, options):
    if options.header_auto:
        # if conflicting header options are given, throw an error
        if not options.header is None:
            invalid_opts(parser)
        else:
            # if autodetect flag is explicitly passed
            return shpshift.Header.AUTODETECT
    else:
        if options.header is None:
            # default case, if no flags are passed
            return shpshift.Header.AUTODETECT
        else:
            # which non-autodetect header flag was passed?
            return shpshift.Header.FIRSTROW if options.header else shpshift.Header.NONE

def selected_geom_options(parser, options):
    selected = [(n, getattr(options, n))
                for n in ['geometrycolumnname',
                          'geometrycolumnindex',
                          'xycolumnnames',
                          'xycolumnindices'] 
                if not getattr(options, n) is None]
    return selected
    

def parse_options():
    usage = "usage: %prog [options] GEOMETRYOPTION [INPUTFILE] OUTPUTFILE"
    version = "%prog " + shpshift.VERSION
    parser = OptionParser(usage=usage, version=version)

    parser.add_option("-s", "--sheet-index",
                       action="store", dest="sheetnum", default=0, type="int",
                       help="index of the sheet to convert, starting from 0 (defaults to 0)")

    parser.add_option("-g", "--geometry-column-name",
                       action="store", dest="geometrycolumnname", default=None, 
                       help="name of the column containing feature geometry")

    parser.add_option("-i", "--geometry-column-index",
                       action="store", dest="geometrycolumnindex", type="int", default=None, 
                       help="index of the column containing feature geometry, starting from 0")

    parser.add_option("-x", "--xy-column-names",
                       action="store", dest="xycolumnnames", nargs=2, default=None, 
                       help="names of the two columns containing x y point values")

    parser.add_option("-y", "--xy-column-indices",
                       action="store", dest="xycolumnindices", nargs=2, type="int", default=None, 
                       help="indices of the two columns containing x y point values, starting from 0")

    parser.add_option("-r", "--spatial-reference-system",
                      action="store", dest="srs", default=None,
                      help="spatial reference system of the spreadsheet geometry")

    parser.add_option("-f", "--force",
                       action="store_true", dest="overwrite", default=False,
                       help="force overwriting of output files")

    parser.add_option("-l", "--leading-header", 
                      action="store_true", dest="header", default=None,
                      help="leading row of the spreadsheet is a header")
    parser.add_option("-n", "--no-header", 
                      action="store_false", dest="header",
                      help="leading row of the spreadsheet is not a header")
    parser.add_option("-d", "--detect-header", 
                      action="store_true", dest="header_auto", default=False,
                      help="try to detect if the leading row of the spreadsheet is a header [default]")

    (options, args) = parser.parse_args()
    return (parser, options, args)

if __name__ == '__main__':

    (parser, options, args) = parse_options()
    header = get_header(parser, options)

    selected = selected_geom_options(parser, options)
    if len(selected) != 1:
        print_error("Exactly one geometry option from '--geometry-column-name', "
                    "'--geometry-column-index', '--xy-column-names', or '--xy-column-indices' "
                    "must be specified")

    (geom_is_xy, geom_is_numeric) = {'geometrycolumnname': (False, False),
                                     'geometrycolumnindex': (False, True),
                                     'xycolumnnames': (True, False),
                                     'xycolumnindices': (True, True)}[selected[0][0]]
    geom_val = selected[0][1]

    if options.sheetnum < 0:
        print_error("sheet number must be greater than zero")

    # ensure we have the REQUIRED arguments we expect
    if len(args) == 1:
        output_filename = args[0]
        xlfile = sys.stdin.read()
    elif len(args) == 2:
        output_filename = args[1]
        try:
            with open(args[0], "rb") as f:
                xlfile = f.read()
        except IOError, e:
            print_error("could not read file '%s': %s" % (
                    args[0], str(e)))
    else:
        invalid_opts(parser)

    try:
        reader = shpshift.XlsReader(file_contents=xlfile, header=header, sheet_number=options.sheetnum)
    except ValueError, e:
        print_error("problem reading spreadsheet: %s" % str(e))

    reader.set_field_geom(geom_val, geom_is_xy, geom_is_numeric)
    
    writer = shpshift.ShpWriter(output_filename, reader=reader, srs=options.srs, overwrite=options.overwrite)
    writer.write()
    

    
